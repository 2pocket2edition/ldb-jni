/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-2020 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

apply plugin: "java"
apply plugin: "maven-publish"

ext {
    //general things
    javaVersion = "1.8"
    programVersion = "0.0.9-SNAPSHOT"

    //dependency things
    junitVersion = "4.12"
    lombokVersion = "1.16.20"
    leveldbVersion = "0.11.1-SNAPSHOT"
    porklibVersion = "0.5.4-SNAPSHOT"
}

group "net.daporkchop"
version "$programVersion"

compileJava {
    sourceCompatibility = targetCompatibility = "$javaVersion"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenLocal()
    maven {
        name = "DaPorkchop_"
        url = "https://maven.daporkchop.net/"
    }
    maven {
        name = "NukkitX Snapshots"
        url = "https://repo.nukkitx.com/snapshot"
    }
    mavenCentral()
}

dependencies {
    compile "net.daporkchop.lib:natives:$porklibVersion"

    compile "org.iq80.leveldb:leveldb:$leveldbVersion"

    testCompile "net.daporkchop.lib:encoding:$porklibVersion"

    testCompile "junit:junit:$junitVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    repositories {
        if (project.hasProperty("nukkitxMavenUsername") && project.hasProperty("nukkitxMavenPassword")) {
            maven {
                credentials {
                    username = "$nukkitxMavenUsername"
                    password = "$nukkitxMavenPassword"
                }

                name = "NukkitX"
                url = url = version.endsWith('SNAPSHOT') ? "https://repo.nukkitx.com/snapshot" : "https://repo.nukkitx.com/release"
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = "leveldb-mcpe-jni"
            version = project.version

            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

publish.dependsOn(publishToMavenLocal)
build.dependsOn(publish)

if (System.getProperty("os.name", "").toLowerCase().replaceAll("[^a-z0-9]+", "").startsWith("windows")) {
    throw new IllegalStateException("You are running Windows, which is bad and you should feel bad.\nThis means that native libraries cannot be built.")
} else {
    task compileNatives(type: Exec) {
        workingDir "$projectDir"
        commandLine "make", String.format("-j%d", Runtime.getRuntime().availableProcessors())
    }

    compileJava.dependsOn(compileNatives)

    task cleanNatives(type: Exec) {
        workingDir "$projectDir"
        commandLine "make", "clean"
    }

    clean.dependsOn(cleanNatives)
}
